** index.css**

/* Resetting default margin and padding for better consistency */
html, body {
    margin: 0;
    padding: 0;
    font-family: 'Rubik', sans-serif;
    background-color: #EEF0F4;
    user-select: none;
}

*This section resets the default margin and padding of the HTML and body elements.
*It sets the font-family to 'Rubik' and specifies a background color.
*The user-select: none; property disables user selection.

/* Styling for the main container */
.container {
    display: flex;
    flex-wrap: wrap;
    flex-direction: column;
    max-width: 320px;
    margin: 30px auto;
}

*This styles the main container of the app.
*It uses flexbox to create a column layout with a maximum width of 320 pixels.
*The container is centered with 30 pixels of margin at the top and bottom.

/* Styling for the product image */
img {
    width: 150px;
    margin: 0 auto;
}

*This styles the product image, setting its width to 150 pixels and centering it horizontally.

/* Styling for the input field */
input {
    color: #432000;
    background-color: #DCE0EB;
    border: 0;
    padding: 15px;
    border-radius: 8px;
    font-size: 20px;
    text-align: center;
    margin: 10px 0;
}

*This styles the input fields, specifying color, background color, border, padding, border-radius, font size, and text alignment.

/* Styling for the "Add to cart" button */
button {
    color: #FDFDFD;
    background-color: #AC485A;
    border: 0;
    padding: 15px;
    border-radius: 8px;
    font-size: 20px;
    text-align: center;
    margin-top: 10px;
}

button:hover {
    background-color: #432000;
    cursor: pointer;
}

*This styles the "Add to Cart" button and its hover state.
*It sets color, background color, border, padding, border-radius, font size, and margin.
*On hover, the background color changes, and a pointer cursor is displayed.

ul {
    list-style-type: none;
    padding: 0;
    display: flex;
    flex-wrap: wrap;
}

ul li {
    font-size: 20px;
    background-color: #FFFDF8;
    padding: 15px;
    border-radius: 8px;
    flex-grow: 1;
    text-align: center;
    box-shadow: 0px 1px rgba(0, 0, 0, 0.2);
    margin: 5px;
}

ul li:hover {
    background-color: #FFECC7;
    cursor: pointer;
}

*This styles the unordered list and its list items.
*The list items have a background color, padding, border-radius, and box-shadow.
*On hover, the background color changes, and a pointer cursor is displayed.

**index.html**

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shopping Cart App</title>
    <link rel="stylesheet" href="index.css">
</head>
<body>

*This is the HTML document structure, including the document type declaration, opening HTML tag, head, and body tags.
*It sets the character set, viewport settings, and the title of the web page.
*It links the stylesheet index.css to apply styles to the HTML.

    <div class="container">
        <!-- Container for the main content -->
        <button onclick="redirectToLoginPage()">Login</button>
        <img src="img/cat2.png" alt="product Image">
        <!-- Image representing a product -->
        <input type="text" id="input-field" placeholder="List">
        <!-- Input field for the shopping list -->
        <button id="push-button">Add to cart</button>
        <!-- Button to add items to the cart -->
        <ul id="shopping-list">
            <!-- List to display the shopping items -->
            <!-- Existing items will be displayed here -->
        </ul>
    </div>

*This creates the main container div, containing a login button, an image, an input field, an "Add to cart" button, and a shopping list.
*The image is in the img directory and has the alt attribute set.

<!-- Firebase scripts -->
<script src="https://www.gstatic.com/firebasejs/9.20.0/firebase-app.js"></script>
<script src="https://www.gstatic.com/firebasejs/9.20.0/firebase-database.js"></script>

*This includes the Firebase scripts for the Firebase Realtime Database.

    <!-- Your JavaScript files -->
    <script src="function.js" type="module"></script>
    <script src="index.js" defer type="module"></script>
    <script>
        function redirectToLoginPage() {
            window.location.href = "login.html"; // Replace with the path to your login page
        }
    </script>
</body>
</html>

*This includes JavaScript files (function.js and index.js) and a script to redirect to the login page.
*index.js is deferred, ensuring it is executed after the HTML content is parsed.

**index.js**

// Import necessary Firebase modules
import { initializeApp } from "https://www.gstatic.com/firebasejs/9.20.0/firebase-app.js";
import { getDatabase, ref, push, onValue, remove } from "https://www.gstatic.com/firebasejs/9.20.0/firebase-database.js";

*This imports necessary Firebase modules for initializing the app, interacting with the database, and handling real-time updates.

// Your web app's Firebase configuration. You will get this when you create a new Firebase project.
const appSettings = {
    // Add your Firebase configuration here
    // apiKey: "YOUR_API_KEY",
    // authDomain: "YOUR_AUTH_DOMAIN",
    databaseURL: "https://learn-firebase-fb308-default-rtdb.asia-southeast1.firebasedatabase.app/",
    // projectId: "YOUR_PROJECT_ID",
    // storageBucket: "YOUR_STORAGE_BUCKET",
    // messagingSenderId: "YOUR_MESSAGING_SENDER_ID",
    // appId: "YOUR_APP_ID"
};

*This defines the Firebase configuration settings. The actual values are commented out and should be replaced with your Firebase project details.

// Initialize Firebase app with the provided configuration
const app = initializeApp(appSettings);

*This initializes the Firebase app with the provided configuration.

// Get a reference to the Firebase Realtime Database
const database = getDatabase(app);

*This gets a reference to the Firebase Realtime Database.

// Reference to the "items" location in the database
const itemsInDB = ref(database, "items");

*This creates a reference to the "items" location in the database.

// DOM elements
const inputFieldEl = document.getElementById("input-field");
const pushButtonEl = document.getElementById("push-button");
const shoppingListEl = document.getElementById("shopping-list");

*This gets references to the input field, "Add to Cart" button, and shopping list elements in the DOM.

// Event listener for the "Add to cart" button
pushButtonEl.addEventListener("click", function () {
    let inputValue = inputFieldEl.value; // Get the input value

    // Push the input value to the "items" location in the database
    push(itemsInDB, inputValue);

    // Clear the input field
    clearInputFieldEl();
});

*This adds an event listener to the "Add to Cart" button.
*It retrieves the input value, pushes it to the "items" location in the database, and clears the input field.

// Event listener for changes in the "items" location in the database
onValue(itemsInDB, function (snapshot) {
    // Check if there are items in the database
    if (snapshot.exists()) {
        // Convert the snapshot values to an array
        let thingsArray = Object.entries(snapshot.val());

        // Clear the existing items in the shopping list
        clearShoppingList();

        // Loop through the items and add them to the shopping list
        for (let i = 0; i < thingsArray.length; i++) {
            let currentItem = thingsArray[i];
            appendItemToShoppingList(currentItem);
        }
    } else {
        shoppingListEl.innerHTML = "No items here ...yet";
    }
});

*This adds an event listener for changes in the "items" location in the database.
*It checks if there are items and, if so, converts the snapshot values to an array.
*It clears the existing items in the shopping list and appends the new items.

// Function to append item to the shopping list
function appendItemToShoppingList(item) {
    let itemID = item[0];
    let itemValue = item[1];

    let newEl = document.createElement("li");
    newEl.textContent = itemValue;

    // Add event listener to remove item on click
    newEl.addEventListener("click", function () {
        let exactLocationOfItemInDB = ref(database, `items/${itemID}`);
        remove(exactLocationOfItemInDB);
    });

    // Append the new item to the shopping list
    shoppingListEl.appendChild(newEl);
}

*This is a function that appends an item to the shopping list.
*It creates a new list item, sets its text content, adds an event listener to remove the item on click, and appends it to the shopping list.

// Function to clear the shopping list
function clearShoppingList() {
    shoppingListEl.innerHTML = "";
}

*This is a function that clears the shopping list by setting its HTML content to an empty string.

// Function to clear the input field
function clearInputFieldEl() {
    inputFieldEl.value = "";
}

*This is a function that clears the input field by setting its value to an empty string.